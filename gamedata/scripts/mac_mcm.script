local SINGLETON = nil
local selected_app = 0

BLOCKED_TABS = {}

PDA_APPS = {
    --[[["app_map"] = {
        name                = "pda_btn_quests",
		texture				= "my_app1",
        tab                 = "eptTasks",        
    },
    ["app_relations"] = {
        name                = "pda_btn_relations",
		texture				= "my_app1",
        tab                 = "eptRelations",        
    },
    ["app_contacts"] = {
        name                = "pda_btn_contacts",
		texture				= "my_app1",
        tab                 = "eptContacts",        
    },
    ["app_ranking"] = {
        name                = "pda_btn_ranking",
		texture				= "my_app1",
        tab                 = "eptRanking",        
    },
    ["app_encyclopedia"] = {
        name                = "pda_btn_encyclopedia",
		texture				= "my_app1",
        tab                 = "eptEncyclopedia",        
    },
    ["app_radio"] = {
        name                = "pda_btn_radio",
		texture				= "my_app1",
        tab                 = "eptRadio",        
    },
     ["app_logs"] = {
        name                = "pda_btn_logs",
		texture				= "my_app1",
        tab                 = "eptLogs",        
    },]]
}

----------------------------------------------------------------------------------------------------
-- MCM
----------------------------------------------------------------------------------------------------

LAUNCHER_KEY = DIK_keys.DIK_RCONTROL

function on_mcm_load()
	options = { 
		id = "pda_apps", sh = true, gr= {
			{ id = "launcher_key", type = "key_bind", val = 2, def = DIK_keys.DIK_RCONTROL},
		}
	}
	return options
end

function on_option_change()
	LAUNCHER_KEY = ui_mcm.get("pda_apps/launcher_key")
end

----------------------------------------------------------------------------------------------------
-- Adders
----------------------------------------------------------------------------------------------------

function add_app(app_id, app_data)

    assert(type(app_id) == "string" or app_id:len() ~= 0, "MAC: Invalid app_id! Must be a non-empty string.")
    assert(not app_id:match("[^%w_]"), "MAC: App id '" .. app_id .. "' contains invalid characters! Only letters, numbers and underscores are allowed.")
    assert(type(app_data) == "table", "MAC: Invalid app_data! Must be a table.")
    assert(type(app_data.name) == "string" or app_data.name:len() ~= 0, "MAC: App '" .. app_id .. "' missing or invalid 'name' field! Must be non-empty string.")
    assert(type(app_data.tab) == "string" or app_data.tab:len() ~= 0, "MAC: App '" .. app_id .. "' missing or invalid 'tab' field! Must be non-empty string.")
    assert(type(app_data.texture) == "string" or app_data.texture:len() ~= 0, "MAC: App '" .. app_id .. "' missing or invalid 'texture' field! Must be non-empty string.")

    if app_data.func then
        if type(app_data.func) ~= "function" then
            printf("!MAC: App '" .. app_id .. "' has invalid 'func' field! Must be a function, got: " .. type(app_data.func))
            app_data.func = nil
        end
    end
    
    if PDA_APPS[app_id] then
        printf("!MAC: App with id '" .. app_id .. "' already exists, overwriting!")
    end
    
    PDA_APPS[app_id] = app_data
    printf("$MAC: Added app: %s (tab: %s).", app_id, app_data.tab)

    SINGLETON = nil

end

function remove_app(app_id)

    assert(type(app_id) == "string", "MAC: Invalid app_id! Must be a string.")
    
    if PDA_APPS[app_id] then
        PDA_APPS[app_id] = nil
        printf("$MAC: Removed app: %s", app_id)
        SINGLETON = nil
    else
        printf("!MAC: App with id '%s' not found, cannot remove.", app_id)
    end

end

function add_blocked_tabs(tabs_table)
    for _, tab_name in ipairs(tabs_table) do
        BLOCKED_TABS[tab_name] = true
    end
end

function remove_blocked_tabs(tabs_table)
    if not tabs_table then
        BLOCKED_TABS = {}
        printf("$MAC: All blocked tabs cleared.")
        return
    end
    
    for _, tab_name in ipairs(tabs_table) do
        if BLOCKED_TABS[tab_name] then
            BLOCKED_TABS[tab_name] = nil
            printf("$MAC: Removed blocked tab: %s.", tab_name)
        else
            printf("!MAC: Tab '%s' was not blocked.", tab_name)
        end
    end
end

function reload_interface()
    printf("$MAC: Reloading PDA interface.")
    
    SINGLETON = nil
    selected_app = 0
    
    local pda_menu = ActorMenu.get_pda_menu()
    if pda_menu:IsShown() then
        local current_tab = pda_menu:GetActiveSection()
        if current_tab == "eptLauncher" then
            pda_menu:SetActiveSubdialog("eptLauncher")
        end
    end
end

----------------------------------------------------------------------------------------------------
-- Laucher
----------------------------------------------------------------------------------------------------

function get_ui()
    SINGLETON = SINGLETON or pda_laucher_tab()
    SINGLETON:Reset()
    return SINGLETON
end

class "pda_laucher_tab" (CUIScriptWnd)
function pda_laucher_tab:__init() super()
    self:InitControls()
    self:InitCallbacks()
end

function pda_laucher_tab:__finalize()
end

function pda_laucher_tab:InitControls()
    self:SetWndRect(Frect():set(0,0,1024,768))
    local xml               = CScriptXmlInit()
    xml:ParseFile("pda_apps.xml")

    self.apps = {}
	self.text = {}
	self.apps_ids = {}

    local app_index = 1
    local apps_per_row = 10
    local start_x = 50
    local start_y = 100
    local spacing_x = 75
    local spacing_y = 80

    for app_id, app_data in pairs(PDA_APPS) do

        local row = math.floor((app_index - 1) / apps_per_row)
        local col = (app_index - 1) % apps_per_row
        
        local pos_x = start_x + col * spacing_x
        local pos_y = start_y + row * spacing_y
        
        self.apps[app_index] 		= xml:Init3tButton("app_base", self)
        self.apps[app_index]:InitTexture (app_data.texture)
		self.text[app_index] = xml:InitTextWnd("app_base:text", self)
        self.text[app_index]:SetTextAlignment(2)
		self.apps_ids[app_index] = app_id
        self:Register(self.apps[app_index], "app_" .. app_id)

        self.apps[app_index]:SetWndPos(vector2():set(pos_x, pos_y))
        self.text[app_index]:SetWndPos(vector2():set(pos_x, pos_y + 50))
        
        app_index = app_index + 1
    end
end

function pda_laucher_tab:InitCallbacks()
    for i = 1, #self.apps do
        local app_id = self.apps_ids[i]
	    self:AddCallback("app_" .. app_id,  ui_events.BUTTON_CLICKED, self.OnAppClicked,    self)
    end
end

function pda_laucher_tab:OnAppClicked()
    local app_id = self.apps_ids[selected_app]
    local app_data = PDA_APPS[app_id]
    ActorMenu.get_pda_menu():SetActiveSubdialog(app_data.tab)
end

function pda_laucher_tab:Update()
    for i = 1, #self.apps do
        if self.apps[i] and self.apps[i]:IsCursorOverWindow() then
            selected_app = i
        end
    end
    CUIScriptWnd.Update(self)
end

function pda_laucher_tab:Reset()
    local pda_menu = ActorMenu.get_pda_menu()
    pda_menu:GetTabControl():Show(false)

    for i = 1, #self.apps do
        local app_data = PDA_APPS[self.apps_ids[i]]
        self.text[i]:SetText(game.translate_string(app_data.name))
    end
end

----------------------------------------------------------------------------------------------------
-- Other
----------------------------------------------------------------------------------------------------

function bind_launcher(dik)
	if dik == LAUNCHER_KEY then

        local tab = ActorMenu.get_pda_menu():GetActiveSection()
        if BLOCKED_TABS[tab] then return end

		local obj = db.actor:active_item()
		if obj then
			local sec = obj:section()
			if sec:find("device_pda_") and obj:is_device_enabled() and obj:condition() > 0.05 then
                ActorMenu.get_pda_menu():SetActiveSubdialog("eptLauncher")
			end
		end

	end
end

function mac_handle_tabs()
    local mac_main = pda.set_active_subdialog
    pda.set_active_subdialog = function(section)
        if section == "eptLauncher" then
            return get_ui()
        else
            for app_id, app_data in pairs(PDA_APPS) do
                if app_data.tab == section and app_data.func then
                    return app_data.func()
                end
            end
            return mac_main(section)
        end
    end
end

function on_game_start()
	RegisterScriptCallback("on_key_press", bind_launcher)
    RegisterScriptCallback("on_game_load", mac_handle_tabs)
    RegisterScriptCallback("actor_on_first_update", on_option_change)
    RegisterScriptCallback("on_option_change", on_option_change)
    if ui_pda_taskboard_tab then
        add_app("app_taskboard", {name = "pda_btn_taskboard", texture = "app_taskboard", tab = "eptTaskboard", func = ui_pda_taskboard_tab.get_ui})
    end
    if pda_inter_gui then
        add_app("app_interactive", {name = "pda_btn_interactive", texture = "app_interactive", tab = "eptInteractive", func = pda_inter_gui.start_PDAX})
    end

    if get_aoe_version then return end

    assert(get_modded_exes_version() > 20250823, game.translate_string("st_mac_modded_exes"))

end
